name: Wireguard_provision
on:
  #push:
  #  branches:
  #    - main
  #    - master
  pull_request:
    branches:
      - main
      - master
  #To be able to run it manually    
  workflow_dispatch:

env:
  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}

#defaults:
# run:
#   shell: bash
#   working-directory: ./labs/aws/vpn/wireguard  

jobs:
  wireguard:
    name: Wireguard infra provisioning
    runs-on: ubuntu-22.04
    
    defaults:
      run:
        working-directory: ./labs/aws/vpn/wireguard
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Check out code
        uses: actions/checkout@v3
          

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.8
          terraform_wrapper: false #Fixing jq output issue
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Initialize Terraform
        run: |
          terraform init -input=false
      - name: Terraform Validate
        run: |
          terraform validate
      - name: Terraform plan
        run: |
          terraform plan -var="AWS_SSH_KEY=${{ secrets.TF_VAR_AWS_SSH_KEY }}"
      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false -var="AWS_SSH_KEY=${{ secrets.TF_VAR_AWS_SSH_KEY }}"
      #- name: Install jq
      #  run: jq --version
      # terraform output -json |jq --raw-output '.[].value'
      - name: IP output
        id: ip_output
        run: |
          echo "IP=$(terraform output -raw bastion_public_ip)"
          
          
  ansible_lint:
    name: Provisioning ansible infra part
    needs: wireguard
    runs-on: ubuntu-22.04
    #defaults:
    #  run:
    #    working-directory: ./labs/aws/vpn/wireguard/ansible
    steps:
      - name: Lint Ansible Playbook
        #uses: ansible/ansible-lint-action@main
        uses: ansible-community/ansible-lint-action@v6.3.0
        with:
          targets: "./labs/aws/vpn/wireguard/ansible"

  run_playbook:
    name: Run ansible playbok
    needs: [wireguard, ansible_lint]
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./labs/aws/vpn/wireguard/ansible
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies
      - name: Install Ansible deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
      #- name: Ip to connect
      #  run: |
      #    echo "IP=$(terraform output -raw bastion_public_ip)"
      - name: Check if we can use IP var
        run: |
          echo "${{ env.IP }}"
          echo "${{ needs.wireguard.ip_output }}"
          ls -al    
      #- name: Deploy APIService
      #  uses: dawidd6/action-ansible-playbook@v2
      #  with:
      #    playbook: playbook.yml
      #    directory: ./
      #    key: ${{secrets.LAB_SSH_PRIV}}
      #    inventory: |
      #      [all]
      #      ${{ env.IP }}
      #    options: |
      #      --verbose
        
        #run: |
        #  ls -al
  
  # deployAnsible:
  #   needs: ansible_lint
  #   runs-on: ubuntu-22.04
  #   #permissions:
  #     #packages: write
  #   #  contents: read
  #   #  id-token: write
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: ./.github/actions/ansible
  #   #- uses: ./github/actions/ansible
  #     with: 
  #       playbook: playbook.yml
  #       #playbook: ./.github/actions/ansible/playbook.yml
  #       inventory: localhost
        
