name: Wireguard_provision
on:
  #push:
  #  branches:
  #    - main
  #    - master
  #pull_request:
  #  branches:
  #    - main
  #    - master
  pull_request_target:
    branches:
      - main
      - master
  #To be able to run it manually    
  workflow_dispatch:

env:
  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
  AWS_SSH_KEY_PRIVATE: ${{ secrets.TF_VAR_AWS_SSH_KEY_PRIVATE }}


#defaults:
# run:
#   shell: bash
#   working-directory: ./labs/aws/vpn/wireguard  

jobs:

  wireguard:
    name: Wireguard infra provisioning
    runs-on: ubuntu-22.04
    if: ${{ github.actor == 'dependabot[bot]' || github.actor == 'p-bogdan' }}
    defaults:
      run:
        working-directory: ./labs/aws/vpn/wireguard
    permissions:
      packages: write
      #contents: read
      id-token: write
      #Expanding perms for dependabot
      contents: write
      pull-requests: write
      #
    steps:   
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}      

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.3
          terraform_wrapper: false #Fixing jq output issue
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Initialize Terraform
        run: |
          terraform init -input=false
      - name: Terraform Validate
        run: |
          terraform validate
      - name: Terraform plan
        run: |
          terraform plan -var="AWS_SSH_KEY=${{ secrets.TF_VAR_AWS_SSH_KEY }}"  -var="AWS_SSH_KEY_PRIVATE=${{ secrets.TF_VAR_AWS_SSH_KEY_PRIVATE }}"
      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false -var="AWS_SSH_KEY=${{ secrets.TF_VAR_AWS_SSH_KEY }}" -var="AWS_SSH_KEY_PRIVATE=${{ secrets.TF_VAR_AWS_SSH_KEY_PRIVATE }}"
        continue-on-error: true
      #- name: Install jq
      #  run: jq --version
      # terraform output -json |jq --raw-output '.[].value'
      # echo "IP=$(terraform output -raw bastion_public_ip)" >> $GITHUB_ENV
      - name: IP output
        #id: ip_output
        id: ip_output
        run: |
          echo "::set-output name=ip_output::$(terraform output -raw bastion_public_ip)"
    outputs:
      #ip_output: ${{ steps.ip_output.outputs.IP }}
      ip_output: ${{ steps.ip_output.outputs.ip_output }}
          
          
  ansible_lint:
    name: Provisioning ansible infra part
    needs: wireguard
    runs-on: ubuntu-22.04
    #defaults:
    #  run:
    #    working-directory: ./labs/aws/vpn/wireguard/ansible
    steps:
      - name: Lint Ansible Playbook
        #uses: ansible/ansible-lint-action@main
        uses: ansible-community/ansible-lint-action@v6.16.0
        with:
          targets: "./labs/aws/vpn/wireguard/ansible"

  run_playbook:
    name: Run ansible playbok
    needs: [ansible_lint, wireguard]
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./labs/aws/vpn/wireguard/ansible
    steps:
      - uses: actions/checkout@v3
      # - name: Set up Python 3.9
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.9'
      #     cache: 'pip' # caching pip dependencies
      # - name: Install Ansible deps
      #   run: |
      #     pip3 install --upgrade pip
      #     if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
      #     ansible-galaxy collection install community.docker
      #     ansible-galaxy collection list
      # - name: Set up Python 3.9
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.9'
      #     cache: 'pip' # caching pip dependencies
      # - name: Install Ansible deps
      #   run: |
      #     ansible-galaxy collection install community.docker
      #     ansible-galaxy collection list
          
      #- name: Check if we can use IP var
      #  run: |
      #    echo ${{needs.wireguard.outputs.ip_output}}
      #    ls -al
      
      #- name: Verifying ansible inventory invoking
      #  run: |
      #    echo ${{ secrets.ANSIBLE_INVENTORY }}
      #- name: Run a multi-line script
      #  run: |
      #    tar czvf wireguard-compose.tar.gz ./docker-compose.yml
      # - name: copy file via ssh password
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{needs.wireguard.outputs.ip_output}}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{secrets.LAB_SSH_PRIV}}
      #     port: ${{ secrets.SSH_PORT }}
      #     source: "./docker-compose.yml"
      #     target: "/tmp"
      - name: Deploy Wireguard automation
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbook.yml
          directory: ./labs/aws/vpn/wireguard/ansible
          key: ${{secrets.LAB_SSH_PRIV}}
          inventory: |
           [wireguard]
           ${{needs.wireguard.outputs.ip_output}} ansible_ssh_host=${{needs.wireguard.outputs.ip_output}} ansible_ssh_port=${{ secrets.SSH_PORT }} ansible_connection=ssh ansible_ssh_user=${{ secrets.SSH_USERNAME }} ansible_become_user=root ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          known_hosts: .known_hosts
          options: |
            --limit wireguard
            --verbose
        
        #run: |
        #  ls -al
  
  # deployAnsible:
  #   needs: ansible_lint
  #   runs-on: ubuntu-22.04
  #   #permissions:
  #     #packages: write
  #   #  contents: read
  #   #  id-token: write
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: ./.github/actions/ansible
  #   #- uses: ./github/actions/ansible
  #     with: 
  #       playbook: playbook.yml
  #       #playbook: ./.github/actions/ansible/playbook.yml
  #       inventory: localhost
        
