Post-install
1. Verify that you can access k8s cluster
 kubectl get nodes
 kubectl config get-contexts
 kubectl get pods -A
 kubectl get crds
 
 2.flux provision
 2.1 Run flux checks
 flux check --pre
 2.2. Provision flux repo
 flux bootstrap github   --owner=$GITHUB_USER  \
 --repository=flux-infra \
 --branch=main  \
 --path=./clusters/dev  \
 --personal \
 --log-level=debug \
 --network-policy=false \
 --components=source-controller,kustomize-controller

 2.3. Verify that flux installed successfully
 flux check

 2.4. Verify that installed on k8s side
 kubectl get crds
 kubectl get pods -n flux-system
 kubectl get all -n flux-system
 kubectl get clusterroles,clusterrolebindings,serviceaccounts -n flux-system -l "app.kubernetes.io/instance=flux-system"

 2.5. Verify that kustomizations and sources were created
 flux get ks
 flux get sources git

 3. Create a Git Source to Sync with the Repository
flux create source git instavote \
  --url=https://github.com/p-bogdan/instavote \
  --branch=main \
  --interval=30s
3.1. Check if new git source was successfully setup and sync
flux get sources git

3.2. Make sure that instavote ns is created
kubectl get ns
kubectl create ns instavote
kubectl get ns

3.3. Create kustomization
flux create kustomization vote-dev \
  --source=instavote \
  --path="./deploy/vote" \
  --prune=true \
  --interval=1m \
  --target-namespace=instavote \
  --export > vote-dev.yaml

3.4. Verify that kustomization was created successfully
flux get ks
flux get sources git 
flux reconcile ks vote-dev
flux reconcile source git instavote


4. Adding healthcheck before declaring kustomization to be ready
flux create kustomization vote-dev \
  --source=instavote \
  --path="./deploy/vote" \
  --prune=true\
  --interval=1m \
  --health-check="Deployment/vote.instavote" \
  --export > vote-dev-kustomization.yaml

5. Create kustomization for redis
flux create kustomization redis-dev \
--source=instavote \
--path="./deploy/redis" \
--prune=true \
--interval=1m \
--target-namespace=instavote \
--health-check="Deployment/redis.instavote" \
--export > redis-kustomization.yaml

6. Modify the vote kustomization to depends on redis:
flux create kustomization vote-dev \
  --source=instavote \
  --path="./deploy/vote" \
  --prune=true \
  --interval=1m \
  --target-namespace=instavote \
  --health-check="Deployment/vote.instavote" \
  --depends-on=redis-dev \
  --export > vote-dev-kustomization.yaml

(Provisioning is automated with terraform and pre-configured manifests in github repos)

How to access dev,staging clusters that are running
1) Check what clusters are running
gcloud container clusters list
2) Install gke-cloud-auth-plugin binary
gcloud components install gke-gcloud-auth-plugin
3) Check its version
gke-gcloud-auth-plugin --version
4) Access to dev cluster
gcloud container clusters get-credentials k8s-lab-dev \
    --region=us-east1-b
5) Verify configured contexts
kubectl config get-contexts
We can see that our dev cluster context is named as gke_ci-cd-387713_us-east1-b_k8s-lab-dev
6) Let's rename this context to dev 
kubectl config rename-context gke_ci-cd-387713_us-east1-b_k8s-lab-dev dev for easier reference

Staging
The same as with dev cluster setup context
1) gcloud container clusters get-credentials k8s-lab-staging \
    --region=us-east1-b
2) kubectl config rename-context gke_ci-cd-387713_us-east1-b_k8s-lab-staging staging
3) Check all contexts
kubectl config get-contexts
Now you should dev, staging contexts beetween which you can switch

How to create sealed secret for flux+slack integration (webhook)
1) Create secret and export it to yaml file
kubectl create secret -n flux-system generic slack-url --from-literal=address=https://hooks.slack.com/services/${slack_webhook} --dry-run=client -o yaml > flux_slack.yaml

2) Create sealed secret
kubeseal <flux_slack.yaml >sealed_flux_slack.yaml --format=yaml --controller-name=sealed-secrets

Sometimes we need to run kubectl apply -f sealed_flux_slack.yaml manually, for some reason secret isn't created automatically, hopefully will be fixed later.


Alert providers
1)  Check alert providers
flux get alert-providers
2) Creating alert provider
flux create alert-provider slack \
  --type=slack \
  --channel=devops \
  --secret-ref=slack-url --export

3) Set up an alert to Send Notifications to Slack and track the following resources - kustomization, gitrepository, helmrelease

flux create alert slack-notif \
  --provider-ref=slack \
  --event-source="GitRepository/*" \
  --event-source="Kustomization/*" \
  --event-source="HelmRelease/*" \
  --event-severity=info \
  --export

4) Check created alert
flux get alert
NAME       	SUSPENDED	READY	MESSAGE
slack-notif	False    	True 	Initialized

Destroy infra
Since we don't want to remove flux git repository after terraform destroy to be able to remove our terraform infra, we can remove it manually from state file - terraform state rm flux_bootstrap_git.this
After that we can destroy remaining resources - terraform destroy -auto-approve
